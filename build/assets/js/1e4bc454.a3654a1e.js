"use strict";(self.webpackChunknumblock_docs=self.webpackChunknumblock_docs||[]).push([[9701],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>b});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),i=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=i(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},N=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=i(t),N=a,b=u["".concat(s,".").concat(N)]||u[N]||d[N]||o;return t?r.createElement(b,c(c({ref:n},p),{},{components:t})):r.createElement(b,c({ref:n},p))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=N;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:a,c[1]=l;for(var i=2;i<o;i++)c[i]=t[i];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}N.displayName="MDXCreateElement"},540:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var r=t(7462),a=(t(7294),t(3905));const o={id:"setup-nrc721-transfer",title:"NRC-721 NFT Transfer"},c=void 0,l={unversionedId:"developers/bridges/chainbridge/setup-nrc721-transfer",id:"developers/bridges/chainbridge/setup-nrc721-transfer",title:"NRC-721 NFT Transfer",description:"This section guides you through setting up an NRC-721 bridge and sending NFTs between blockchain networks.",source:"@site/docs/developers/bridges/chainbridge/setup-nrc721-transfer.md",sourceDirName:"developers/bridges/chainbridge",slug:"/developers/bridges/chainbridge/setup-nrc721-transfer",permalink:"/docs/developers/bridges/chainbridge/setup-nrc721-transfer",draft:!1,tags:[],version:"current",frontMatter:{id:"setup-nrc721-transfer",title:"NRC-721 NFT Transfer"},sidebar:"develop",previous:{title:"NRC-20 Token Transfer",permalink:"/docs/developers/bridges/chainbridge/setup-nrc20-transfer"},next:{title:"Use case - NRC-20 Bridge",permalink:"/docs/developers/bridges/chainbridge/use-case-nrc20-bridge"}},s={},i=[{value:"Step 1: Register resource ID",id:"step-1-register-resource-id",level:2},{value:"(Optional): Make contracts mintable/burnable",id:"optional-make-contracts-mintableburnable",level:2},{value:"Step 2: Transfer NFT",id:"step-2-transfer-nft",level:2}],p={toc:i};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This section guides you through setting up an NRC-721 bridge and sending NFTs between blockchain networks."),(0,a.kt)("h2",{id:"step-1-register-resource-id"},"Step 1: Register resource ID"),(0,a.kt)("p",null,"You will first need to register the resource ID for the NRC-721 token in the Bridge contracts on both chains."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# For NumBlock Testnet\n$ cb-sol-cli bridge register-resource \\\n  --url https://rpc-testnet.numblock.org \\\n  --privateKey [ADMIN_ACCOUNT_PRIVATE_KEY] \\\n  --gasPrice [GAS_PRICE] \\\n  # Set ResourceID for NRC-721 Token\n  --resourceId "0x000000000000000000000000000000e389d61c11e5fe32ec1735b3cd38c69501" \\\n  --bridge "[BRIDGE_CONTRACT_ADDRESS]" \\\n  --handler "[NRC-721_HANDLER_CONTRACT_ADDRESS]" \\\n  --targetContract "[NRC-721_CONTRACT_ADDRESS]"\n\n# For local chain\n$ cb-sol-cli bridge register-resource \\\n  --url http://localhost:10002 \\\n  --privateKey [ADMIN_ACCOUNT_PRIVATE_KEY] \\\n  # Set ResourceID for NRC-721 Token\n  --resourceId "0x000000000000000000000000000000e389d61c11e5fe32ec1735b3cd38c69501" \\\n  --bridge "[BRIDGE_CONTRACT_ADDRESS]" \\\n  --handler "[NRC-721_HANDLER_CONTRACT_ADDRESS]" \\\n  --targetContract "[NRC-721_CONTRACT_ADDRESS]"\n')),(0,a.kt)("h2",{id:"optional-make-contracts-mintableburnable"},"(Optional): Make contracts mintable/burnable"),(0,a.kt)("p",null,"To make the Tokens mintable/burnable, you will need to call the following commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# Let NRC-721 contract burn on source chain or mint on destination chain\n$ cb-sol-cli bridge set-burn \\\n  --url http://localhost:10002 \\\n  --privateKey [ADMIN_ACCOUNT_PRIVATE_KEY] \\\n  --bridge "[BRIDGE_CONTRACT_ADDRESS]" \\\n  --handler "[NRC-721_HANDLER_CONTRACT_ADDRESS]" \\\n  --tokenContract "[NRC-721_CONTRACT_ADDRESS]"\n\n# Grant minter role to NRC-721 Handler contract (Only if you want to mint)\n$ cb-sol-cli NRC-721 add-minter \\\n  --url http://localhost:10002 \\\n  --privateKey [ADMIN_ACCOUNT_PRIVATE_KEY] \\\n  --NRC-721Address "[NRC-721_CONTRACT_ADDRESS]" \\\n  --minter "[NRC-721_HANDLER_CONTRACT_ADDRESS]"\n')),(0,a.kt)("h2",{id:"step-2-transfer-nft"},"Step 2: Transfer NFT"),(0,a.kt)("p",null,"Firstly, you will mint an NFT if you need it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# Mint NFT 0x50\n$ cb-sol-cli NRC-721 mint \\\n  --url https://rpc-testnet.numblock.org \\\n  --privateKey [MINTER_ROLE_ACCOUNT] \\\n  --gasPrice [GAS_PRICE] \\\n  --NRC-721Address "[NRC-721_CONTRACT_ADDRESS]" \\\n  --id 0x50\n')),(0,a.kt)("p",null,"To check the NFT owner, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"cb-sol-cli NRC-721 owner")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# Check the current owner of NFT\n$ cb-sol-cli NRC-721 owner \\\n  --url https://rpc-testnet.numblock.org \\\n  --NRC-721Address "[NRC-721_CONTRACT_ADDRESS]" \\\n  --id 0x50\n')),(0,a.kt)("p",null,"Then, you will approve a transfer of the NFT by NRC-721 Handler"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# Approve transfer of the NFT 0x50 by NRC-721 Handler\n$ cb-sol-cli NRC-721 approve \\\n  --url https://rpc-testnet.numblock.org \\\n  --privateKey [PRIVATE_KEY] \\\n  --gasPrice [GAS_PRICE] \\\n  --NRC-721Address "[NRC-721_CONTRACT_ADDRESS]" \\\n  --recipient "[NRC-721_HANDLER_CONTRACT_ADDRESS]" \\\n  --id 0x50\n')),(0,a.kt)("p",null,"Finally, you will start the transfer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# Start transfer from NumBlock PoS to NumBlock  chain\n$ cb-sol-cli NRC-721 deposit \\\n  --url https://rpc-testnet.numblock.org \\\n  --privateKey [PRIVATE_KEY] \\\n  --gasPrice [GAS_PRICE] \\\n  --bridge "[BRIDGE_CONTRACT_ADDRESS]" \\\n  --resourceId "0x000000000000000000000000000000e389d61c11e5fe32ec1735b3cd38c69501" \\\n  --id 0x50 \\\n  # ChainID of NumBlock  chain\n  --dest 100 \\\n  --recipient "[RECIPIENT_ADDRESS_IN_LOCAL_CHAIN]"\n')),(0,a.kt)("p",null,"The relayer will get the event and vote for the proposal. It executes a transaction to send NFTs to the recipient account in the NumBlock  chain after the required number of votes are submitted. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"INFO[11-19|09:07:50] Handling nonfungible deposit event       chain=numblock\nINFO[11-19|09:07:50] Attempting to resolve message            chain=local type=NonFungibleTransfer src=9999 dst=100 nonce=2 rId=000000000000000000000000000000e389d61c11e5fe32ec1735b3cd38c69501\nINFO[11-19|09:07:50] Creating NRC-721 proposal                 chain=local src=9999 nonce=2\nINFO[11-19|09:07:50] Watching for finalization event          chain=local src=9999 nonce=2\nINFO[11-19|09:07:50] Submitted proposal vote                  chain=local tx=0x58a22d84a08269ad2e8d52d8dc038621f1a21109d11c7b6e0d32d5bf21ea8505 src=9999 depositNonce=2 gasPrice=1\nINFO[11-19|09:08:15] Submitted proposal execution             chain=local tx=0x57419844881a07531e31667c609421662d94d21d0709e64fb728138309267e68 src=9999 dst=100 nonce=2 gasPrice=3\n")),(0,a.kt)("p",null,"You can check the owner of the NFT on the NumBlock  network after the execution is completed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# Check the owner of NFT 0x50 in NumBlock  chain\n$ cb-sol-cli NRC-721 owner \\\n  --url http://localhost:10002 \\\n  --NRC-721Address "[NRC-721_CONTRACT_ADDRESS]" \\\n  --id 0x50\n')))}u.isMDXComponent=!0}}]);