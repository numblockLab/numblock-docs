"use strict";(self.webpackChunknumblock_docs=self.webpackChunknumblock_docs||[]).push([[698],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),h=l(r),d=a,m=h["".concat(c,".").concat(d)]||h[d]||u[d]||o;return r?n.createElement(m,s(s({ref:t},p),{},{components:r})):n.createElement(m,s({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[h]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9939:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={description:"Ethers.js is a compact library for interacting with Ethereum Virtual Machine (EVM) based blockchains. With NumBlock being an EVM chain, you can use Ethers.js to interact with the NumBlock ecosystem.",keywords:["ethers","ethersjs","ethers.js","library","lib"]},s="Using Ethers.js",i={unversionedId:"developers/interact/ethers-js",id:"developers/interact/ethers-js",title:"Using Ethers.js",description:"Ethers.js is a compact library for interacting with Ethereum Virtual Machine (EVM) based blockchains. With NumBlock being an EVM chain, you can use Ethers.js to interact with the NumBlock ecosystem.",source:"@site/docs/developers/interact/ethers-js.md",sourceDirName:"developers/interact",slug:"/developers/interact/ethers-js",permalink:"/docs/developers/interact/ethers-js",draft:!1,tags:[],version:"current",frontMatter:{description:"Ethers.js is a compact library for interacting with Ethereum Virtual Machine (EVM) based blockchains. With NumBlock being an EVM chain, you can use Ethers.js to interact with the NumBlock ecosystem.",keywords:["ethers","ethersjs","ethers.js","library","lib"]},sidebar:"develop",previous:{title:"Using Web3.js",permalink:"/docs/developers/interact/web3-js"},next:{title:"Introduction to Smart Contracts",permalink:"/docs/developers/smart-contracts/"}},c={},l=[{value:"Adding Ethers.js to your Project",id:"adding-ethersjs-to-your-project",level:2},{value:"Connecting to NumBlock with MetaMask",id:"connecting-to-numblock-with-metamask",level:2},{value:"Connecting to NumBlock via RPC",id:"connecting-to-numblock-via-rpc",level:2},{value:"Interacting with a Contract",id:"interacting-with-a-contract",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},h=p("Tabs"),u=p("TabItem"),d={toc:l};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"using-ethersjs"},"Using Ethers.js"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.ethers.io/v5/"},"Ethers.js")," is a compact library for interacting with Ethereum Virtual Machine (EVM) based blockchains. With NumBlock being an EVM chain, you can use Ethers.js to interact with the NumBlock ecosystem."),(0,a.kt)("h2",{id:"adding-ethersjs-to-your-project"},"Adding Ethers.js to your Project"),(0,a.kt)(h,{groupId:"package-manager",mdxType:"Tabs"},(0,a.kt)(u,{value:"yarn",label:"yarn",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add ethers\n"))),(0,a.kt)(u,{value:"npm",label:"npm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save ethers\n")))),(0,a.kt)("p",null,"To import the ethers library into your project using Node.js, use the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const { ethers } = require("ethers");\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { ethers } from "ethers";\n')),(0,a.kt)("h2",{id:"connecting-to-numblock-with-metamask"},"Connecting to NumBlock with MetaMask"),(0,a.kt)("p",null,"After installing, you need to create a web3 instance and set a provider. Most Ethereum supported wallets, such as MetaMask, have an ",(0,a.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1193"},"EIP-1193")," compliant provider at ",(0,a.kt)("inlineCode",{parentName:"p"},"window.ethereum"),". This works for connecting to NumBlock as well. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// A Web3Provider wraps a standard Web3 provider, which is\n// what MetaMask injects as window.ethereum into each page\nconst provider = new ethers.providers.Web3Provider(window.ethereum)\n\n// MetaMask requires requesting permission to connect users accounts\nawait provider.send("eth_requestAccounts", []);\n\n// The MetaMask plugin also allows signing transactions to\n// send ether and pay to change state within the blockchain.\n// For this, you need the account signer...\nconst signer = provider.getSigner()\n')),(0,a.kt)("p",null,"View the official Ethers.js MetaMask docs ",(0,a.kt)("a",{parentName:"p",href:"https://docs.ethers.io/v5/getting-started/#getting-started--connecting"},"here"),"."),(0,a.kt)("h2",{id:"connecting-to-numblock-via-rpc"},"Connecting to NumBlock via RPC"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// If you don't specify a //url//, Ethers connects to the default \n// (i.e. ``http:/\\/localhost:8545``)\nconst provider = new ethers.providers.JsonRpcProvider();\n\n// The provider also allows signing transactions to\n// send ether and pay to change state within the blockchain.\n// For this, we need the account signer...\nconst signer = provider.getSigner()\n")),(0,a.kt)("p",null,"View the official Ethers.js RPC docs ",(0,a.kt)("a",{parentName:"p",href:"https://docs.ethers.io/v5/getting-started/#getting-started--connecting-rpc"},"here"),"."),(0,a.kt)("h2",{id:"interacting-with-a-contract"},"Interacting with a Contract"),(0,a.kt)("p",null,"To connect to and interact with a deployed contract, you can do the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// The Contract object\nconst Contract = new ethers.Contract(Address, Abi, provider);\n")),(0,a.kt)("p",null,"View the official Ethers.js contract docs ",(0,a.kt)("a",{parentName:"p",href:"https://docs.ethers.io/v5/getting-started/#getting-started--contracts"},"here"),"."))}m.isMDXComponent=!0}}]);