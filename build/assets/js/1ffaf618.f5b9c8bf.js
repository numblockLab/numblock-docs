"use strict";(self.webpackChunknumblock_docs=self.webpackChunknumblock_docs||[]).push([[8727],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},h=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,h=c(e,["components","mdxType","originalType","parentName"]),p=s(n),k=a,m=p["".concat(l,".").concat(k)]||p[k]||u[k]||o;return n?r.createElement(m,i(i({ref:t},h),{},{components:n})):r.createElement(m,i({ref:t},h))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=k;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},6611:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={id:"blockchain",title:"Block Management"},i=void 0,c={unversionedId:"architecture/modules/blockchain",id:"architecture/modules/blockchain",title:"Block Management",description:"Overview",source:"@site/docs/architecture/modules/blockchain.md",sourceDirName:"architecture/modules",slug:"/architecture/modules/blockchain",permalink:"/docs/architecture/modules/blockchain",draft:!1,tags:[],version:"current",frontMatter:{id:"blockchain",title:"Block Management"},sidebar:"develop",previous:{title:"Modules",permalink:"/docs/category/modules"},next:{title:"State",permalink:"/docs/architecture/modules/state"}},l={},s=[{value:"Overview",id:"overview",level:2},{value:"<em>WriteBlocks</em>",id:"writeblocks",level:2},{value:"Blockchain Subscriptions",id:"blockchain-subscriptions",level:2}],h={toc:s};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"One of the main modules of the NumBlock are ",(0,a.kt)("strong",{parentName:"p"},"Block Management")," and ",(0,a.kt)("strong",{parentName:"p"},"State"),". ",(0,a.kt)("br",null)),(0,a.kt)("p",null,"*",(0,a.kt)("em",{parentName:"p"},"Block Management")," is the powerhouse that deals with block reorganizations. This means that it deals with all the logic that happens when a new block is included in the blockchain."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"State")," represents the ",(0,a.kt)("em",{parentName:"p"},"state transition")," object. It deals with how the state changes when a new block is included. ",(0,a.kt)("br",null)," Among other things, ",(0,a.kt)("strong",{parentName:"p"},"State")," handles:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Executing transactions"),(0,a.kt)("li",{parentName:"ul"},"Executing the EVM"),(0,a.kt)("li",{parentName:"ul"},"Changing the Merkle tries"),(0,a.kt)("li",{parentName:"ul"},"Much more, which is covered in the corresponding ",(0,a.kt)("strong",{parentName:"li"},"State")," section \ud83d\ude42")),(0,a.kt)("p",null,"The key takeaway is that these 2 parts are very connected, and they work closely together in order for the client to function. ",(0,a.kt)("br",null)," For example, when the ",(0,a.kt)("strong",{parentName:"p"},"Block Management")," layer receives a new block (and no reorganization occurred), it calls the ",(0,a.kt)("strong",{parentName:"p"},"State")," to perform a state transition."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Management")," also has to deal with some parts relating to consensus (ex. ",(0,a.kt)("em",{parentName:"p"},"is this ethHash correct?"),", ",(0,a.kt)("em",{parentName:"p"},"is this PoS correct?"),"). ",(0,a.kt)("br",null)," In one sentence, ",(0,a.kt)("strong",{parentName:"p"},"it is the main core of logic through which all blocks are included"),"."),(0,a.kt)("h2",{id:"writeblocks"},(0,a.kt)("em",{parentName:"h2"},"WriteBlocks")),(0,a.kt)("p",null,"One of the most important parts relating to the ",(0,a.kt)("strong",{parentName:"p"},"Block Management")," layer is the ",(0,a.kt)("em",{parentName:"p"},"WriteBlocks")," method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="blockchain/blockchain.go"',title:'"blockchain/blockchain.go"'},'// WriteBlocks writes a batch of blocks\nfunc (b *Blockchain) WriteBlocks(blocks []*types.Block) error {\n    if len(blocks) == 0 {\n        return fmt.Errorf("no headers found to insert")\n    }\n\n    parent, ok := b.readHeader(blocks[0].ParentHash())\n    if !ok {\n        return fmt.Errorf("parent of %s (%d) not found: %s", blocks[0].Hash().String(), blocks[0].Number(), blocks[0].ParentHash())\n    }\n\n    // validate chain\n    for i := 0; i < len(blocks); i++ {\n        block := blocks[i]\n\n        if block.Number()-1 != parent.Number {\n            return fmt.Errorf("number sequence not correct at %d, %d and %d", i, block.Number(), parent.Number)\n        }\n        if block.ParentHash() != parent.Hash {\n            return fmt.Errorf("parent hash not correct")\n        }\n        if err := b.consensus.VerifyHeader(parent, block.Header, false, true); err != nil {\n            return fmt.Errorf("failed to verify the header: %v", err)\n        }\n\n        // verify body data\n        if hash := buildroot.CalculateUncleRoot(block.Uncles); hash != block.Header.Sha3Uncles {\n            return fmt.Errorf("uncle root hash mismatch: have %s, want %s", hash, block.Header.Sha3Uncles)\n        }\n        \n        if hash := buildroot.CalculateTransactionsRoot(block.Transactions); hash != block.Header.TxRoot {\n            return fmt.Errorf("transaction root hash mismatch: have %s, want %s", hash, block.Header.TxRoot)\n        }\n        parent = block.Header\n    }\n\n    // Write chain\n    for indx, block := range blocks {\n        header := block.Header\n\n        body := block.Body()\n        if err := b.db.WriteBody(header.Hash, block.Body()); err != nil {\n            return err\n        }\n        b.bodiesCache.Add(header.Hash, body)\n\n        // Verify uncles. It requires to have the bodies on memory\n        if err := b.VerifyUncles(block); err != nil {\n            return err\n        }\n        // Process and validate the block\n        if err := b.processBlock(blocks[indx]); err != nil {\n            return err\n        }\n\n        // Write the header to the chain\n        evnt := &Event{}\n        if err := b.writeHeaderImpl(evnt, header); err != nil {\n            return err\n        }\n        b.dispatchEvent(evnt)\n\n        // Update the average gas price\n        b.UpdateGasPriceAvg(new(big.Int).SetUint64(header.GasUsed))\n    }\n\n    return nil\n}\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"WriteBlocks")," method is the entry point to write blocks into the blockchain. As a parameter, it takes in a range of blocks.",(0,a.kt)("br",null),"\nFirstly, the blocks are validated. After that, they are written to the chain."),(0,a.kt)("p",null,"The actual ",(0,a.kt)("em",{parentName:"p"},"state transition")," is performed by calling the ",(0,a.kt)("em",{parentName:"p"},"processBlock")," method within ",(0,a.kt)("em",{parentName:"p"},"WriteBlocks"),"."),(0,a.kt)("p",null,"It is worth mentioning that, because it is the entry point for writing blocks to the blockchain, other modules (such as the ",(0,a.kt)("strong",{parentName:"p"},"Sealer"),") utilize this method."),(0,a.kt)("h2",{id:"blockchain-subscriptions"},"Blockchain Subscriptions"),(0,a.kt)("p",null,"There needs to be a way to monitor blockchain-related changes. ",(0,a.kt)("br",null),"\nThis is where ",(0,a.kt)("strong",{parentName:"p"},"Subscriptions")," come in. "),(0,a.kt)("p",null,"Subscriptions are a way to tap into blockchain event streams and instantly receive meaningful data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="blockchain/subscription.go"',title:'"blockchain/subscription.go"'},"type Subscription interface {\n    // Returns a Blockchain Event channel\n    GetEventCh() chan *Event\n    \n    // Returns the latest event (blocking)\n    GetEvent() *Event\n    \n    // Closes the subscription\n    Close()\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"Blockchain Events")," contain information regarding any changes made to the actual chain. This includes reorganizations, as well as new blocks:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="blockchain/subscription.go"',title:'"blockchain/subscription.go"'},"type Event struct {\n    // Old chain removed if there was a reorg\n    OldChain []*types.Header\n\n    // New part of the chain (or a fork)\n    NewChain []*types.Header\n\n    // Difficulty is the new difficulty created with this event\n    Difficulty *big.Int\n\n    // Type is the type of event\n    Type EventType\n\n    // Source is the source that generated the blocks for the event\n    // right now it can be either the Sealer or the Syncer. TODO\n    Source string\n}\n")),(0,a.kt)("admonition",{title:"Refresher",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Do you remember when we mentioned the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"monitor"))," command in the ",(0,a.kt)("a",{parentName:"p",href:"/docs/validators/cli-commands"},"CLI Commands"),"?"),(0,a.kt)("p",{parentName:"admonition"},"The Blockchain Events are the original events that happen in NumBlock, and they're later mapped to a Protocol Buffers message format for easy transfer.")))}p.isMDXComponent=!0}}]);