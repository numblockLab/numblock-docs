"use strict";(self.webpackChunknumblock_docs=self.webpackChunknumblock_docs||[]).push([[7862],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,d=u["".concat(s,".").concat(m)]||u[m]||h[m]||o;return n?r.createElement(d,i(i({ref:t},p),{},{components:n})):r.createElement(d,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7822:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={id:"json-rpc",title:"REST API"},i=void 0,l={unversionedId:"architecture/modules/json-rpc",id:"architecture/modules/json-rpc",title:"REST API",description:"Overview",source:"@site/docs/architecture/modules/json-rpc.md",sourceDirName:"architecture/modules",slug:"/architecture/modules/json-rpc",permalink:"/docs/architecture/modules/json-rpc",draft:!1,tags:[],version:"current",frontMatter:{id:"json-rpc",title:"REST API"},sidebar:"develop",previous:{title:"Transaction Handling",permalink:"/docs/architecture/modules/txpool"},next:{title:"Consensus Engine",permalink:"/docs/architecture/modules/consensus"}},s={},c=[{value:"Overview",id:"overview",level:2},{value:"Blockchain Interface",id:"blockchain-interface",level:2},{value:"ETH Endpoints",id:"eth-endpoints",level:2},{value:"Filter Manager",id:"filter-manager",level:2},{value:"\ud83d\udcdc Resources",id:"-resources",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"REST API")," module implements the ",(0,a.kt)("strong",{parentName:"p"},"JSON RPC API layer"),", something that dApp developers use to interact with the NumBlock\nblockchain."),(0,a.kt)("p",null,"It includes support for standard ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://eth.wiki/json-rpc/API"},"json-rpc endpoints")),", as well as websocket\nendpoints."),(0,a.kt)("h2",{id:"blockchain-interface"},"Blockchain Interface"),(0,a.kt)("p",null,"The NumBlock uses the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"blockchain interface"))," to define all the methods that the REST API module needs to use, in\norder to deliver its endpoints."),(0,a.kt)("p",null,"It is the base implementation that's passed into the REST API layer."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="jsonrpc/blockchain.go"',title:'"jsonrpc/blockchain.go"'},"type blockchainInterface interface {\n    // Header returns the current header of the chain (genesis if empty)\n    Header() *types.Header\n\n    // GetReceiptsByHash returns the receipts for a hash\n    GetReceiptsByHash(hash types.Hash) ([]*types.Receipt, error)\n\n    // Subscribe subscribes for chain head events\n    SubscribeEvents() blockchain.Subscription\n\n    // GetHeaderByNumber returns the header by number\n    GetHeaderByNumber(block uint64) (*types.Header, bool)\n\n    // GetAvgGasPrice returns the average gas price\n    GetAvgGasPrice() *big.Int\n\n    // AddTx adds a new transaction to the tx pool\n    AddTx(tx *types.Transaction) error\n\n    // State returns a reference to the state\n    State() state.State\n\n    // BeginTxn starts a transition object\n    BeginTxn(parentRoot types.Hash, header *types.Header) (*state.Transition, error)\n\n    // GetBlockByHash gets a block using the provided hash\n    GetBlockByHash(hash types.Hash, full bool) (*types.Block, bool)\n\n    // ApplyTxn applies a transaction object to the blockchain\n    ApplyTxn(header *types.Header, txn *types.Transaction) ([]byte, bool, error)\n\n    stateHelperInterface\n}\n")),(0,a.kt)("h2",{id:"eth-endpoints"},"ETH Endpoints"),(0,a.kt)("p",null,"All the standard JSON RPC endpoints are implemented in:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"jsonrpc/eth_endpoint.go\n")),(0,a.kt)("h2",{id:"filter-manager"},"Filter Manager"),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"Filter Manager")," is a service that runs alongside the JSON RPC server."),(0,a.kt)("p",null,"It provides support for filtering blocks on the blockchain.",(0,a.kt)("br",null),"\nSpecifically, it includes both a ",(0,a.kt)("strong",{parentName:"p"},"log")," and a ",(0,a.kt)("strong",{parentName:"p"},"block")," level filter."),(0,a.kt)("p",null,"The Filter Manager relies heavily on Subscription Events, mentioned in\nthe ",(0,a.kt)("a",{parentName:"p",href:"blockchain#blockchain-subscriptions"},"Blockchain")," section"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="jsonrpc/filter_manager.go"',title:'"jsonrpc/filter_manager.go"'},"type Filter struct {\n    id string\n\n    // block filter\n    block *headElem\n\n    // log cache\n    logs []*Log\n\n    // log filter\n    logFilter *LogFilter\n\n    // index of the filter in the timer array\n    index int\n\n    // next time to timeout\n    timestamp time.Time\n\n    // websocket connection\n    ws wsConn\n}\n\n\ntype FilterManager struct {\n    logger hclog.Logger\n\n    store   blockchainInterface\n    closeCh chan struct{}\n\n    subscription blockchain.Subscription\n\n    filters map[string]*Filter\n    lock    sync.Mutex\n\n    updateCh chan struct{}\n    timer    timeHeapImpl\n    timeout  time.Duration\n\n    blockStream *blockStream\n}\n\n")),(0,a.kt)("p",null,"Filter Manager events get dispatched in the ",(0,a.kt)("em",{parentName:"p"},"Run")," method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="jsonrpc/filter_manager.go"',title:'"jsonrpc/filter_manager.go"'},'func (f *FilterManager) Run() {\n\n    // watch for new events in the blockchain\n    watchCh := make(chan *blockchain.Event)\n    go func() {\n        for {\n            evnt := f.subscription.GetEvent()\n            if evnt == nil {\n                return\n            }\n            watchCh <- evnt\n        }\n    }()\n\n    var timeoutCh <-chan time.Time\n    for {\n        // check for the next filter to be removed\n        filter := f.nextTimeoutFilter()\n        if filter == nil {\n            timeoutCh = nil\n        } else {\n            timeoutCh = time.After(filter.timestamp.Sub(time.Now()))\n        }\n\n        select {\n        case evnt := <-watchCh:\n            // new blockchain event\n            if err := f.dispatchEvent(evnt); err != nil {\n                f.logger.Error("failed to dispatch event", "err", err)\n            }\n\n        case <-timeoutCh:\n            // timeout for filter\n            if !f.Uninstall(filter.id) {\n                f.logger.Error("failed to uninstall filter", "id", filter.id)\n            }\n\n        case <-f.updateCh:\n            // there is a new filter, reset the loop to start the timeout timer\n\n        case <-f.closeCh:\n            // stop the filter manager\n            return\n        }\n    }\n}\n')),(0,a.kt)("h2",{id:"-resources"},"\ud83d\udcdc Resources"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://eth.wiki/json-rpc/API"},"Ethereum JSON-RPC")))))}u.isMDXComponent=!0}}]);