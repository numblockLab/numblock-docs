"use strict";(self.webpackChunknumblock_docs=self.webpackChunknumblock_docs||[]).push([[2413],{3905:(e,t,a)=>{a.d(t,{Zo:()=>i,kt:()=>c});var l=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,l,n=function(e,t){if(null==e)return{};var a,l,n={},r=Object.keys(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=l.createContext({}),o=function(e){var t=l.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},i=function(e){var t=o(e.components);return l.createElement(d.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},k=l.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,d=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),m=o(a),k=n,c=m["".concat(d,".").concat(k)]||m[k]||u[k]||r;return a?l.createElement(c,p(p({ref:t},i),{},{components:a})):l.createElement(c,p({ref:t},i))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,p=new Array(r);p[0]=k;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[m]="string"==typeof e?e:n,p[1]=s;for(var o=2;o<r;o++)p[o]=a[o];return l.createElement.apply(null,p)}return l.createElement.apply(null,a)}k.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>p});var l=a(7294),n=a(6010);const r="tabItem_Ymn6";function p(e){let{children:t,hidden:a,className:p}=e;return l.createElement("div",{role:"tabpanel",className:(0,n.Z)(r,p),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>k});var l=a(7462),n=a(7294),r=a(6010),p=a(2389),s=a(7392),d=a(7094),o=a(2466);const i="tabList__CuJ",m="tabItem_LNqP";function u(e){const{lazy:t,block:a,defaultValue:p,values:u,groupId:k,className:c}=e,b=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=u??b.map((e=>{let{props:{value:t,label:a,attributes:l}}=e;return{value:t,label:a,attributes:l}})),x=(0,s.l)(h,((e,t)=>e.value===t.value));if(x.length>0)throw new Error(`Docusaurus error: Duplicate values "${x.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const T=null===p?p:p??b.find((e=>e.props.default))?.props.value??b[0].props.value;if(null!==T&&!h.some((e=>e.value===T)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${T}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:f}=(0,d.U)(),[v,N]=(0,n.useState)(T),g=[],{blockElementScrollPositionUntilNextRender:S}=(0,o.o5)();if(null!=k){const e=y[k];null!=e&&e!==v&&h.some((t=>t.value===e))&&N(e)}const I=e=>{const t=e.currentTarget,a=g.indexOf(t),l=h[a].value;l!==v&&(S(t),N(l),null!=k&&f(k,String(l)))},Z=e=>{let t=null;switch(e.key){case"Enter":I(e);break;case"ArrowRight":{const a=g.indexOf(e.currentTarget)+1;t=g[a]??g[0];break}case"ArrowLeft":{const a=g.indexOf(e.currentTarget)-1;t=g[a]??g[g.length-1];break}}t?.focus()};return n.createElement("div",{className:(0,r.Z)("tabs-container",i)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},c)},h.map((e=>{let{value:t,label:a,attributes:p}=e;return n.createElement("li",(0,l.Z)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>g.push(e),onKeyDown:Z,onClick:I},p,{className:(0,r.Z)("tabs__item",m,p?.className,{"tabs__item--active":v===t})}),a??t)}))),t?(0,n.cloneElement)(b.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function k(e){const t=(0,p.Z)();return n.createElement(u,(0,l.Z)({key:String(t)},e))}},3286:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>d,default:()=>k,frontMatter:()=>s,metadata:()=>o,toc:()=>m});var l=a(7462),n=(a(7294),a(3905)),r=a(5488),p=a(5162);const s={id:"cli-commands",title:"CLI Commands",description:"List of CLI commands and command flags for NumBlock.",keywords:["docs","cli","commands","flags"]},d=void 0,o={unversionedId:"validators/cli-commands",id:"validators/cli-commands",title:"CLI Commands",description:"List of CLI commands and command flags for NumBlock.",source:"@site/docs/validators/cli-commands.md",sourceDirName:"validators",slug:"/validators/cli-commands",permalink:"/docs/validators/cli-commands",draft:!1,tags:[],version:"current",frontMatter:{id:"cli-commands",title:"CLI Commands",description:"List of CLI commands and command flags for NumBlock.",keywords:["docs","cli","commands","flags"]},sidebar:"develop",previous:{title:"Overview",permalink:"/docs/validators/overview"},next:{title:"Run a Validator",permalink:"/docs/validators/validator-node"}},i={},m=[{value:"Startup Commands",id:"startup-commands",level:2},{value:"server flags",id:"server-flags",level:3},{value:"<h4><i>data-dir</i></h4>",id:"data-dir",level:4},{value:"<h4><i>jsonrpc</i></h4>",id:"jsonrpc",level:4},{value:"<h4><i>json-rpc-block-range-limit</i></h4>",id:"json-rpc-block-range-limit",level:4},{value:"<h4><i>json-rpc-batch-request-limit</i></h4>",id:"json-rpc-batch-request-limit",level:4},{value:"<h4><i>grpc</i></h4>",id:"grpc",level:4},{value:"<h4><i>libp2p</i></h4>",id:"libp2p",level:4},{value:"<h4><i>prometheus</i></h4>",id:"prometheus",level:4},{value:"<h4><i>block-gas-target</i></h4>",id:"block-gas-target",level:4},{value:"<h4><i>max-peers</i></h4>",id:"max-peers",level:4},{value:"<h4><i>max-inbound-peers</i></h4>",id:"max-inbound-peers",level:4},{value:"<h4><i>max-outbound-peers</i></h4>",id:"max-outbound-peers",level:4},{value:"<h4><i>max-enqueued</i></h4>",id:"max-enqueued",level:4},{value:"<h4><i>log-level</i></h4>",id:"log-level",level:4},{value:"<h4><i>log-to</i></h4>",id:"log-to",level:4},{value:"<h4><i>chain</i></h4>",id:"chain",level:4},{value:"<h4><i>join</i></h4>",id:"join",level:4},{value:"<h4><i>nat</i></h4>",id:"nat",level:4},{value:"<h4><i>dns</i></h4>",id:"dns",level:4},{value:"<h4><i>price-limit</i></h4>",id:"price-limit",level:4},{value:"<h4><i>max-slots</i></h4>",id:"max-slots",level:4},{value:"<h4><i>config</i></h4>",id:"config",level:4},{value:"<h4><i>secrets-config</i></h4>",id:"secrets-config",level:4},{value:"<h4><i>dev</i></h4>",id:"dev",level:4},{value:"<h4><i>dev-interval</i></h4>",id:"dev-interval",level:4},{value:"<h4><i>no-discover</i></h4>",id:"no-discover",level:4},{value:"<h4><i>restore</i></h4>",id:"restore",level:4},{value:"<h4><i>block-time</i></h4>",id:"block-time",level:4},{value:"<h4><i>access-control-allow-origins</i></h4>",id:"access-control-allow-origins",level:4},{value:"Operator Commands",id:"operator-commands",level:2},{value:"Peer Commands",id:"peer-commands",level:3},{value:"IBFT Commands",id:"ibft-commands",level:3},{value:"Transaction Pool Commands",id:"transaction-pool-commands",level:3},{value:"Blockchain commands",id:"blockchain-commands",level:3},{value:"Secrets Commands",id:"secrets-commands",level:2},{value:"secrets init flags",id:"secrets-init-flags",level:3},{value:"secrets generate flags",id:"secrets-generate-flags",level:3},{value:"secrets output flags",id:"secrets-output-flags",level:3},{value:"Responses",id:"responses",level:2},{value:"Status Response",id:"status-response",level:3},{value:"Monitor Response",id:"monitor-response",level:3},{value:"Utilities",id:"utilities",level:2},{value:"whitelist commands",id:"whitelist-commands",level:3},{value:"backup flags",id:"backup-flags",level:3},{value:"Genesis Template",id:"genesis-template",level:2},{value:"Data Directory",id:"data-directory",level:3},{value:"Resources",id:"resources",level:2}],u={toc:m};function k(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,l.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This section details the present commands, command flags in the NumBlock, and how they're used."),(0,n.kt)("admonition",{title:"JSON output support",type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"The ",(0,n.kt)("inlineCode",{parentName:"p"},"--json")," flag is supported on some commands. This flag instructs the command to print the output in JSON format")),(0,n.kt)("h2",{id:"startup-commands"},"Startup Commands"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Command")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"server"),(0,n.kt)("td",{parentName:"tr",align:null},"The default command that starts the blockchain client, by bootstrapping all modules together")))),(0,n.kt)("h3",{id:"server-flags"},"server flags"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"All server flags")),(0,n.kt)("th",{parentName:"tr",align:null}))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#data-dir"},"data-dir")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#jsonrpc"},"jsonrpc"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#json-rpc-block-range-limit"},"json-rpc-block-range-limit")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#json-rpc-batch-request-limit"},"json-rpc-batch-request-limit"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#grpc"},"grpc")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#libp2p"},"libp2p"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#prometheus"},"prometheus")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#block-gas-target"},"block-gas-target"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#max-peers"},"max-peers")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#max-inbound-peers"},"max-inbound-peers"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#max-outbound-peers"},"max-outbound-peers")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#max-enqueued"},"max-enqueued"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#log-level"},"log-level")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#log-to"},"log-to"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#chain"},"chain")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#join"},"join"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#nat"},"nat")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#dns"},"dns"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#price-limit"},"price-limit")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#max-slots"},"max-slots"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#config"},"config")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#secrets-config"},"secrets-config"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#dev"},"dev")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#dev-interval"},"dev-interval"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#no-discover"},"no-discover")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#restore"},"restore"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#block-time"},"block-time")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/validators/cli-commands#access-control-allow-origins"},"access-control-allow-origins"))))),(0,n.kt)("h4",{id:"data-dir"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"data-dir"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--data-dir DATA_DIRECTORY]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --data-dir ./example-dir\n")))),(0,n.kt)("p",null,"Used to specify the data directory used for storing NumBlock client data. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"./test-chain"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"jsonrpc"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"jsonrpc"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--jsonrpc JSONRPC_ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --jsonrpc 127.0.0.1:10000\n")))),(0,n.kt)("p",null,"Sets the address and port for the JSON-RPC service ",(0,n.kt)("inlineCode",{parentName:"p"},"address:port"),".",(0,n.kt)("br",{parentName:"p"}),"\n","If only port is defined ",(0,n.kt)("inlineCode",{parentName:"p"},":10001")," it will bind to all interfaces ",(0,n.kt)("inlineCode",{parentName:"p"},"0.0.0.0:10001"),".",(0,n.kt)("br",{parentName:"p"}),"\n","If omitted the service will bind to the default ",(0,n.kt)("inlineCode",{parentName:"p"},"address:port"),".",(0,n.kt)("br",{parentName:"p"}),"\n","Default address: ",(0,n.kt)("inlineCode",{parentName:"p"},"0.0.0.0:8545"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"json-rpc-block-range-limit"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"json-rpc-block-range-limit"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--json-rpc-block-range-limit BLOCK_RANGE]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --json-rpc-block-range-limit 1500\n")))),(0,n.kt)("p",null,"Sets the maximum block range to be considered when executing json-rpc requests that include fromBlock/toBlock values (e.g. eth_getLogs). Default:",(0,n.kt)("inlineCode",{parentName:"p"},"1000"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"json-rpc-batch-request-limit"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"json-rpc-batch-request-limit"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--json-rpc-batch-request-limit MAX_LENGTH]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --json-rpc-batch-request-limit 50\n")))),(0,n.kt)("p",null,"Sets the maximum length to be considered when handling json-rpc batch requests. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"20"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"grpc"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"grpc"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--grpc-address GRPC_ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --grpc-address 127.0.0.1:10001\n")))),(0,n.kt)("p",null,"Sets the address and port for the gRPC service ",(0,n.kt)("inlineCode",{parentName:"p"},"address:port"),". Default address: ",(0,n.kt)("inlineCode",{parentName:"p"},"127.0.0.1:9632"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"libp2p"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"libp2p"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--libp2p LIBP2P_ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --libp2p 127.0.0.1:10002\n")))),(0,n.kt)("p",null,"Sets the address and port for the libp2p service ",(0,n.kt)("inlineCode",{parentName:"p"},"address:port"),". Default address: ",(0,n.kt)("inlineCode",{parentName:"p"},"127.0.0.1:1478"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"prometheus"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"prometheus"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--prometheus PROMETHEUS_ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --prometheus 127.0.0.1:10004\n")))),(0,n.kt)("p",null,"Sets the address and port for the prometheus server ",(0,n.kt)("inlineCode",{parentName:"p"},"address:port"),".",(0,n.kt)("br",{parentName:"p"}),"\n","If only port is defined ",(0,n.kt)("inlineCode",{parentName:"p"},":5001")," the service will bind to all interfaces ",(0,n.kt)("inlineCode",{parentName:"p"},"0.0.0.0:5001"),".",(0,n.kt)("br",{parentName:"p"}),"\n","If omitted the service will not be started."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"block-gas-target"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"block-gas-target"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--block-gas-target BLOCK_GAS_TARGET]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --block-gas-target 10000000\n")))),(0,n.kt)("p",null,"Sets the target block gas limit for the chain. Default (not enforced): ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("p",null,"A more detailed explanation on the block gas target can be found in the ",(0,n.kt)("a",{parentName:"p",href:"/docs/architecture/modules/txpool"},"TxPool section"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"max-peers"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"max-peers"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--max-peers PEER_COUNT]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --max-peers 40\n")))),(0,n.kt)("p",null,"Sets the client's maximum peer count. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"40"),"."),(0,n.kt)("p",null,"Peer limit should be specified either by using ",(0,n.kt)("inlineCode",{parentName:"p"},"max-peers")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"max-inbound/outbound-peers")," flag."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"max-inbound-peers"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"max-inbound-peers"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--max-inbound-peers PEER_COUNT]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --max-inbound-peers 32\n")))),(0,n.kt)("p",null,"Sets the client's maximum inbound peer count. If ",(0,n.kt)("inlineCode",{parentName:"p"},"max-peers")," is set, max-inbound-peer limit is calculated using the following formulae."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"max-inbound-peer = InboundRatio * max-peers"),", where ",(0,n.kt)("inlineCode",{parentName:"p"},"InboundRatio")," is ",(0,n.kt)("inlineCode",{parentName:"p"},"0.8"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"max-outbound-peers"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"max-outbound-peers"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--max-outbound-peers PEER_COUNT]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --max-outbound-peers 8\n")))),(0,n.kt)("p",null,"Sets the client's maximum outbound peer count. If ",(0,n.kt)("inlineCode",{parentName:"p"},"max-peers")," is set, max-outbound-peer count is calculated using the following formulae."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"max-outbound-peer = OutboundRatio * max-peers"),", where ",(0,n.kt)("inlineCode",{parentName:"p"},"OutboundRatio")," is ",(0,n.kt)("inlineCode",{parentName:"p"},"0.2"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"max-enqueued"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"max-enqueued"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--max-enqueued ENQUEUED_TRANSACTIONS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --max-enqueued 210\n")))),(0,n.kt)("p",null,"Sets the maximum number of enqueued transactions per account. Default:",(0,n.kt)("inlineCode",{parentName:"p"},"128"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"log-level"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"log-level"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--log-level LOG_LEVEL]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --log-level DEBUG\n")))),(0,n.kt)("p",null,"Sets the log level for console output. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"INFO"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"log-to"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"log-to"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--log-to LOG_FILE]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --log-to node.log\n")))),(0,n.kt)("p",null,"Defines log file name that will hold all log output from the server command.\nBy default, all server logs will be outputted to console (stdout),\nbut if the flag is set, there will be no output to the console when running server command."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"chain"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"chain"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--chain GENESIS_FILE]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --chain /home/ubuntu/genesis.json\n")))),(0,n.kt)("p",null,"Specifies the genesis file used for starting the chain. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"./genesis.json"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"join"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"join"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--join JOIN_ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --join /ip4/127.0.0.1/tcp/10001/p2p/16Uiu2HAmJxxH1tScDX2rLGSU9exnuvZKNM9SoK3v315azp68DLPW\n")))),(0,n.kt)("p",null,"Specifies the address of the peer that should be joined."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"nat"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"nat"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--nat NAT_ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --nat 192.0.2.1\n")))),(0,n.kt)("p",null,"Sets the external IP address without the port, as it can be seen by peers."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"dns"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"dns"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--dns DNS_ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --dns dns4/example.io\n")))),(0,n.kt)("p",null,"Sets the host DNS address. This can be used to advertise an external DNS. Supports ",(0,n.kt)("inlineCode",{parentName:"p"},"dns"),",",(0,n.kt)("inlineCode",{parentName:"p"},"dns4"),",",(0,n.kt)("inlineCode",{parentName:"p"},"dns6"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"price-limit"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"price-limit"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--price-limit PRICE_LIMIT]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --price-limit 10000\n")))),(0,n.kt)("p",null,"Sets minimum gas price limit to enforce for acceptance into the pool. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"max-slots"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"max-slots"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--max-slots MAX_SLOTS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --max-slots 1024\n")))),(0,n.kt)("p",null,"Sets maximum slots in the pool. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"4096"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"config"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"config"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--config CLI_CONFIG_PATH]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --config ./myConfig.json\n")))),(0,n.kt)("p",null,"Specifies the path to the CLI config. Supports ",(0,n.kt)("inlineCode",{parentName:"p"},".json"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"secrets-config"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"secrets-config"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--secrets-config SECRETS_CONFIG]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --secrets-config ./secretsManagerConfig.json\n")))),(0,n.kt)("p",null,"Sets the path to the SecretsManager config file. Used for Hashicorp Vault, AWS SSM and GCP Secrets Manager. If omitted, the local FS secrets manager is used."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"dev"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"dev"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--dev DEV_MODE]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --dev\n")))),(0,n.kt)("p",null,"Sets the client to dev mode. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"dev-interval"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"dev-interval"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--dev-interval DEV_INTERVAL]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --dev-interval 20\n")))),(0,n.kt)("p",null,"Sets the client's dev notification interval in seconds. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"no-discover"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"no-discover"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--no-discover NO_DISCOVER]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --no-discover\n")))),(0,n.kt)("p",null,"Prevents the client from discovering other peers. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"restore"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"restore"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--restore RESTORE]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --restore backup.dat\n")))),(0,n.kt)("p",null,"Restore blocks from the specified archive file"),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"block-time"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"block-time"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--block-time BLOCK_TIME]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server --block-time 1000\n")))),(0,n.kt)("p",null,"Sets block production time in seconds. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"2")),(0,n.kt)("hr",null),(0,n.kt)("h4",{id:"access-control-allow-origins"},(0,n.kt)("h4",null,(0,n.kt)("i",null,"access-control-allow-origins"))),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"server [--access-control-allow-origins ACCESS_CONTROL_ALLOW_ORIGINS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'server --access-control-allow-origins "https://edge-docs.polygon.technology"\n')))),(0,n.kt)("p",null,"Sets the authorized domains to be able to share responses from JSON-RPC requests.",(0,n.kt)("br",{parentName:"p"}),"\n","Add multiple flags ",(0,n.kt)("inlineCode",{parentName:"p"},'--access-control-allow-origins "https://example1.com" --access-control-allow-origins "https://example2.com"')," to authorize multiple domains.",(0,n.kt)("br",{parentName:"p"}),"\n","If omitted Access-Control-Allow-Origins header will be set to ",(0,n.kt)("inlineCode",{parentName:"p"},"*")," and all domains will be authorized."),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"operator-commands"},"Operator Commands"),(0,n.kt)("h3",{id:"peer-commands"},"Peer Commands"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Command")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"peers add"),(0,n.kt)("td",{parentName:"tr",align:null},"Adds a new peer using their libp2p address")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"peers list"),(0,n.kt)("td",{parentName:"tr",align:null},"Lists all the peers the client is connected to through libp2p")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"peers status"),(0,n.kt)("td",{parentName:"tr",align:null},"Returns the status of a specific peer from the peers list, using the libp2p address")))),(0,n.kt)("h3",null,"peers add flags"),(0,n.kt)("h4",null,(0,n.kt)("i",null,"addr")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"peers add --addr PEER_ADDRESS\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"peers add --addr /ip4/127.0.0.1/tcp/10001/p2p/16Uiu2HAmJxxH1tScDX2rLGSU9exnuvZKNM9SoK3v315azp68DLPW\n")))),(0,n.kt)("p",null,"Peer's libp2p address in the multiaddr format."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"grpc-address")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"peers add [--grpc-address GRPC_ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"peers add --grpc-address 127.0.0.1:10003\n")))),(0,n.kt)("p",null,"Address of the gRPC API. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"127.0.0.1:9632"),"."),(0,n.kt)("h3",null,"peers list flags"),(0,n.kt)("h4",null,(0,n.kt)("i",null,"grpc-address")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"peers list [--grpc-address GRPC_ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"peers list --grpc-address 127.0.0.1:10003\n")))),(0,n.kt)("p",null,"Address of the gRPC API. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"127.0.0.1:9632"),"."),(0,n.kt)("h3",null,"peers status flags"),(0,n.kt)("h4",null,(0,n.kt)("i",null,"peer-id")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"peers status --peer-id PEER_ID\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"peers status --peer-id 16Uiu2HAmJxxH1tScDX2rLGSU9exnuvZKNM9SoK3v315azp68DLPW\n")))),(0,n.kt)("p",null,"Libp2p node ID of a specific peer within p2p network."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"grpc-address")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"peers status [--grpc-address GRPC_ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"peers status --grpc-address 127.0.0.1:10003\n")))),(0,n.kt)("p",null,"Address of the gRPC API. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"127.0.0.1:9632"),"."),(0,n.kt)("h3",{id:"ibft-commands"},"IBFT Commands"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Command")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ibft snapshot"),(0,n.kt)("td",{parentName:"tr",align:null},"Returns the IBFT snapshot")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ibft candidates"),(0,n.kt)("td",{parentName:"tr",align:null},"Queries the current set of proposed candidates, as well as candidates that have not been included yet")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ibft propose"),(0,n.kt)("td",{parentName:"tr",align:null},"Proposes a new candidate to be added/removed from the validator set")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ibft status"),(0,n.kt)("td",{parentName:"tr",align:null},"Returns the overall status of the IBFT client")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ibft switch"),(0,n.kt)("td",{parentName:"tr",align:null},"Add fork configurations into genesis.json file to switch IBFT type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ibft quorum"),(0,n.kt)("td",{parentName:"tr",align:null},"Specifies the block number after which the optimal quorum size method will be used for reaching consensus")))),(0,n.kt)("h3",null,"ibft snapshot flags"),(0,n.kt)("h4",null,(0,n.kt)("i",null,"number")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft snapshot [--number BLOCK_NUMBER]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft snapshot --number 100\n")))),(0,n.kt)("p",null,"The block height (number) for the snapshot."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"grpc-address")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft snapshot [--grpc-address GRPC_ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft snapshot --grpc-address 127.0.0.1:10003\n")))),(0,n.kt)("p",null,"Address of the gRPC API. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"127.0.0.1:9632"),"."),(0,n.kt)("h3",null,"ibft candidates flags"),(0,n.kt)("h4",null,(0,n.kt)("i",null,"grpc-address")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft candidates [--grpc-address GRPC_ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft candidates --grpc-address 127.0.0.1:10003\n")))),(0,n.kt)("p",null,"Address of the gRPC API. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"127.0.0.1:9632"),"."),(0,n.kt)("h3",null,"ibft propose flags"),(0,n.kt)("h4",null,(0,n.kt)("i",null,"vote")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft propose --vote VOTE\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft propose --vote auth\n")))),(0,n.kt)("p",null,"Proposes a change to the validator set. Possible values: ",(0,n.kt)("inlineCode",{parentName:"p"},"[auth, drop]"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"addr")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft propose --addr ETH_ADDRESS\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft propose --addr 0x89205A3A3b2A69De6Dbf7f01ED13B2108B2c43e7\n")))),(0,n.kt)("p",null,"Address of the account to be voted for."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"bls")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft propose --bls BLS_PUBLIC_KEY\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft propose --bls 0x9952735ca14734955e114a62e4c26a90bce42b4627a393418372968fa36e73a0ef8db68bba11ea967ff883e429b3bfdf\n")))),(0,n.kt)("p",null,"BLS Public Key of the account to be voted for, necessary only in BLS mode."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"grpc-address")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft candidates [--grpc-address GRPC_ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft candidates --grpc-address 127.0.0.1:10003\n")))),(0,n.kt)("p",null,"Address of the gRPC API. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"127.0.0.1:9632"),"."),(0,n.kt)("h3",null,"ibft status flags"),(0,n.kt)("h4",null,(0,n.kt)("i",null,"grpc-address")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft status [--grpc-address GRPC_ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft status --grpc-address 127.0.0.1:10003\n")))),(0,n.kt)("p",null,"Address of the gRPC API. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"127.0.0.1:9632"),"."),(0,n.kt)("h3",null,"ibft switch flags"),(0,n.kt)("h4",null,(0,n.kt)("i",null,"chain")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft switch [--chain GENESIS_FILE]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft switch --chain genesis.json\n")))),(0,n.kt)("p",null,"Specifies the genesis file to update. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"./genesis.json"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"type")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft switch [--type TYPE]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft switch --type PoS\n")))),(0,n.kt)("p",null,"Specifies the IBFT type to switch. Possible values: ",(0,n.kt)("inlineCode",{parentName:"p"},"[PoA, PoS]"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"deployment")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft switch [--deployment DEPLOYMENT]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft switch --deployment 100\n")))),(0,n.kt)("p",null,"Specifies the height of contract deployment. Only available with PoS."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"from")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft switch [--from FROM]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft switch --from 200\n")))),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"ibft-validator-type")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"}," ibft switch [--ibft-validator-type IBFT_VALIDATOR_TYPE]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"}," ibft switch --ibft-validator-type ecdsa\n")))),(0,n.kt)("p",null,"Specifies the validation mode of block headers. Possible values: ",(0,n.kt)("inlineCode",{parentName:"p"},"[ecdsa, bls]"),". Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"bls"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"ibft-validators-prefix-path")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"}," ibft switch [--ibft-validators-prefix-path IBFT_VALIDATORS_PREFIX_PATH]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"}," ibft switch --ibft-validators-prefix-path test-chain-\n")))),(0,n.kt)("p",null,"Prefix path for the directories of new validators. Needs to be present if the flag ",(0,n.kt)("inlineCode",{parentName:"p"},"ibft-validator")," is omitted. Available only when the IBFT mode is PoA (",(0,n.kt)("inlineCode",{parentName:"p"},"--pos")," flag is omitted)."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"ibft-validator")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"}," ibft switch [--ibft-validator IBFT_VALIDATOR_LIST]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"}," ibft switch --ibft-validator 0xC12bB5d97A35c6919aC77C709d55F6aa60436900\n")))),(0,n.kt)("p",null,"Sets passed in addresses as IBFT validators used after the fork. Needs to be present if the flag ",(0,n.kt)("inlineCode",{parentName:"p"},"ibft-validators-prefix-path")," is omitted. Available only in PoA mode."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"If the network is running with ECDSA, the format is ",(0,n.kt)("inlineCode",{parentName:"li"},"--ibft-validator [ADDRESS]"),". "),(0,n.kt)("li",{parentName:"ol"},"If the network is running with BLS, the format is  ",(0,n.kt)("inlineCode",{parentName:"li"},"--ibft-validator [ADDRESS][BLS_PUBLIC_KEY]"),".")),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"max-validator-count")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft switch [--max-validator-count MAX_VALIDATOR_COUNT]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft switch --max-validator-count 42\n")))),(0,n.kt)("p",null,"The maximum number of stakers able to join the validator set in a PoS consensus.\nThis number cannot exceed the value of MAX_SAFE_INTEGER (2^53 - 2)."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"min-validator-count")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft switch [--min-validator-count MIN_VALIDATOR_COUNT]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft switch --min-validator-count 4\n")))),(0,n.kt)("p",null,"The minimum number of stakers needed to join the validator set in a PoS consensus.\nThis number cannot exceed the value of max-validator-count.\nDefaults to 1."),(0,n.kt)("p",null,"Specifies the beginning height of the fork."),(0,n.kt)("hr",null),(0,n.kt)("h3",null,"ibft quorum flags"),(0,n.kt)("h4",null,(0,n.kt)("i",null,"from")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft quorum [--from your_quorum_switch_block_num]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft quorum --from 350\n")))),(0,n.kt)("p",null,"The height to switch the quorum calculation to QuorumOptimal, which uses the formula ",(0,n.kt)("inlineCode",{parentName:"p"},"(2/3 * N)"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"N")," being the number of validator nodes. Please note that this is for backwards compatibility, ie. only for chains that used a Quorum legacy calculation up to a certain block height."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"chain")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft quorum [--chain GENESIS_FILE]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ibft quorum --chain genesis.json\n")))),(0,n.kt)("p",null,"Specifies the genesis file to update. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"./genesis.json"),"."),(0,n.kt)("h3",{id:"transaction-pool-commands"},"Transaction Pool Commands"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Command")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"txpool status"),(0,n.kt)("td",{parentName:"tr",align:null},"Returns the number of transactions in the pool")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"txpool subscribe"),(0,n.kt)("td",{parentName:"tr",align:null},"Subscribes for events in the transaction pool")))),(0,n.kt)("h3",null,"txpool status flags"),(0,n.kt)("h4",null,(0,n.kt)("i",null,"grpc-address")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"txpool status [--grpc-address GRPC_ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"txpool status --grpc-address 127.0.0.1:10003\n")))),(0,n.kt)("p",null,"Address of the gRPC API. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"127.0.0.1:9632"),"."),(0,n.kt)("h3",null,"txpool subscribe flags"),(0,n.kt)("h4",null,(0,n.kt)("i",null,"grpc-address")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"txpool subscribe [--grpc-address GRPC_ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"txpool subscribe --grpc-address 127.0.0.1:10003\n")))),(0,n.kt)("p",null,"Address of the gRPC API. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"127.0.0.1:9632"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"promoted")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"txpool subscribe [--promoted LISTEN_PROMOTED]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"txpool subscribe --promoted\n")))),(0,n.kt)("p",null,"Subscribes for promoted tx events in the TxPool."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"dropped")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"txpool subscribe [--dropped LISTEN_DROPPED]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"txpool subscribe --dropped\n")))),(0,n.kt)("p",null,"Subscribes for dropped tx events in the TxPool."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"demoted")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"txpool subscribe [--demoted LISTEN_DEMOTED]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"txpool subscribe --demoted\n")))),(0,n.kt)("p",null,"Subscribes for demoted tx events in the TxPool."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"added")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"txpool subscribe [--added LISTEN_ADDED]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"txpool subscribe --added\n")))),(0,n.kt)("p",null,"Subscribes for added tx events to the TxPool."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"enqueued")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"txpool subscribe [--enqueued LISTEN_ENQUEUED]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"txpool subscribe --enqueued\n")))),(0,n.kt)("p",null,"Subscribes for enqueued tx events in the account queues."),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"blockchain-commands"},"Blockchain commands"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Command")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"status"),(0,n.kt)("td",{parentName:"tr",align:null},"Returns the status of the client. The detailed response can be found below")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"monitor"),(0,n.kt)("td",{parentName:"tr",align:null},"Subscribes to a blockchain event stream. The detailed response can be found below")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"version"),(0,n.kt)("td",{parentName:"tr",align:null},"Returns the current version of the client")))),(0,n.kt)("h3",null,"status flags"),(0,n.kt)("h4",null,(0,n.kt)("i",null,"grpc-address")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"status [--grpc-address GRPC_ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"status --grpc-address 127.0.0.1:10003\n")))),(0,n.kt)("p",null,"Address of the gRPC API. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"127.0.0.1:9632"),"."),(0,n.kt)("h3",null,"monitor flags"),(0,n.kt)("h4",null,(0,n.kt)("i",null,"grpc-address")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"monitor [--grpc-address GRPC_ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"monitor --grpc-address 127.0.0.1:10003\n")))),(0,n.kt)("p",null,"Address of the gRPC API. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"127.0.0.1:9632"),"."),(0,n.kt)("hr",null),(0,n.kt)("h3",null,"version command"),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"version\n")))),(0,n.kt)("p",null,"Displays release version, git branch, commit hash and build time."),(0,n.kt)("h2",{id:"secrets-commands"},"Secrets Commands"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Command")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"secrets init"),(0,n.kt)("td",{parentName:"tr",align:null},"Initializes the private keys to the corresponding secrets manager")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"secrets generate"),(0,n.kt)("td",{parentName:"tr",align:null},"Generates a secrets manager configuration file which can be parsed by the NumBlock")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"secrets output"),(0,n.kt)("td",{parentName:"tr",align:null},"Prints the BLS public key address, validator public key address, and node id for reference")))),(0,n.kt)("h3",{id:"secrets-init-flags"},"secrets init flags"),(0,n.kt)("h4",null,(0,n.kt)("i",null,"config")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets init [--config SECRETS_CONFIG]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets init --config ./secretsManagerConfig.json\n")))),(0,n.kt)("p",null,"Sets the path to the SecretsManager config file. Used for Hashicorp Vault. If omitted, the local FS secrets manager is used."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"data-dir")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets init [--data-dir DATA_DIRECTORY]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets init --data-dir ./example-dir\n")))),(0,n.kt)("p",null,"Sets the directory for the NumBlock data if the local FS is used."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"ecdsa")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets init [--ecdsa FLAG]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets init --ecdsa=false\n")))),(0,n.kt)("p",null,"Sets the flag indicating whether to generate an ECDSA key. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"network")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets init [--network FLAG]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets init --network=false\n")))),(0,n.kt)("p",null,"Sets the flag indicating whether to generate a Libp2p Network key. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"bls")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets init [--bls FLAG]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets init --bls\n")))),(0,n.kt)("p",null,"Sets the flag indicating whether to generate a BLS key. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,n.kt)("h3",{id:"secrets-generate-flags"},"secrets generate flags"),(0,n.kt)("h4",null,(0,n.kt)("i",null,"dir")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets generate [--dir DATA_DIRECTORY]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets generate --dir ./example-dir\n")))),(0,n.kt)("p",null,"Sets the directory for the secrets manager configuration file Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"./secretsManagerConfig.json")),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"type")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets generate [--type TYPE]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets generate --type hashicorp-vault\n")))),(0,n.kt)("p",null,"Specifies the type of the secrets manager ","[",(0,n.kt)("inlineCode",{parentName:"p"},"hashicorp-vault"),"]",". Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"hashicorp-vault")),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"token")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets generate [--token TOKEN]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets generate --token s.zNrXa9zF9mgrdnClM7PZ19cu\n")))),(0,n.kt)("p",null,"Specifies the access token for the service"),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"server-url")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets generate [--server-url SERVER_URL]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets generate --server-url http://127.0.0.1:8200\n")))),(0,n.kt)("p",null,"Specifies the server URL for the service"),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"name")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets generate [--name NODE_NAME]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets generate --name node-1\n")))),(0,n.kt)("p",null,"Specifies the name of the node for on-service record keeping. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"polygon-edge-node")),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"namespace")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets generate [--namespace NAMESPACE]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets generate --namespace my-namespace\n")))),(0,n.kt)("p",null,"Specifies the namespace used for the Hashicorp Vault secrets manager. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"admin")),(0,n.kt)("h3",{id:"secrets-output-flags"},"secrets output flags"),(0,n.kt)("h4",null,(0,n.kt)("i",null,"bls")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets output [--bls FLAG]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets output --bls\n")))),(0,n.kt)("p",null,"Sets the flag indicating whether to only output the BLS public key. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"true")),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"config")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets output [--config SECRETS_CONFIG]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets output --config ./secretsManagerConfig.json\n")))),(0,n.kt)("p",null,"Sets the path to the SecretsManager config file. If omitted, the local FS secrets manager is used."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"data-dir")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets output [--data-dir DATA_DIRECTORY]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets output --data-dir ./example-dir\n")))),(0,n.kt)("p",null,"Sets the directory for the NumBlock data if the local FS is used."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"node-id")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets output [--node-id FLAG]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets output --node-id\n")))),(0,n.kt)("p",null,"Sets the flag indicating whether to only output the network node ID. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"true")),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"validator")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets output [--validator FLAG]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"secrets output --validator\n")))),(0,n.kt)("p",null,"Sets the flag indicating whether to only output the validator address. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"true")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"responses"},"Responses"),(0,n.kt)("h3",{id:"status-response"},"Status Response"),(0,n.kt)("p",null,"The response object is defined using Protocol Buffers."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="minimal/proto/system.proto"',title:'"minimal/proto/system.proto"'},"message ServerStatus {\n    int64 network = 1;\n\n    string genesis = 2;\n\n    Block current = 3;\n\n    string p2pAddr = 4;\n\n    message Block {\n        int64 number = 1;\n        string hash = 2;\n    }\n}\n")),(0,n.kt)("h3",{id:"monitor-response"},"Monitor Response"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="minimal/proto/system.proto"',title:'"minimal/proto/system.proto"'},'message BlockchainEvent {\n    // The "repeated" keyword indicates an array\n    repeated Header added = 1;\n    repeated Header removed = 2;\n\n    message Header {\n        int64 number = 1;\n        string hash = 2;\n    }\n}\n')),(0,n.kt)("h2",{id:"utilities"},"Utilities"),(0,n.kt)("h3",{id:"whitelist-commands"},"whitelist commands"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Command")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"whitelist show"),(0,n.kt)("td",{parentName:"tr",align:null},"Displays whitelist information")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"whitelist deployment"),(0,n.kt)("td",{parentName:"tr",align:null},"Updates the smart contract deployment whitelist")))),(0,n.kt)("h3",null," whitelist show "),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"whitelist show\n")))),(0,n.kt)("p",null,"Displays whitelist information."),(0,n.kt)("hr",null),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"whitelist show [--chain GENESIS_FILE]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"whitelist show --chain genesis.json\n")))),(0,n.kt)("p",null,"Specifies the genesis file to update. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"./genesis.json"),"."),(0,n.kt)("hr",null),(0,n.kt)("h3",null," whitelist deployment "),(0,n.kt)("h4",null,(0,n.kt)("i",null,"chain")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"whitelist deployment [--chain GENESIS_FILE]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"whitelist deployment --chain genesis.json\n")))),(0,n.kt)("p",null,"Specifies the genesis file to update. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"./genesis.json"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"add")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"whitelist deployment [--add ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"whitelist deployment --add 0x5383Cb489FaCa92365Bb6f9f1FB40bD032E6365d\n")))),(0,n.kt)("p",null,"Adds a new address to the contract deployment whitelist. Only the addresses in the contract deployment whitelist can deploy contracts. If empty, any address can execute the contract deployment"),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"remove")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"whitelist deployment [--remove ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"whitelist deployment --remove 0x5383Cb489FaCa92365Bb6f9f1FB40bD032E6365d\n")))),(0,n.kt)("p",null,"Removes an address from the contract deployment whitelist. Only the addresses in the contract deployment whitelist can deploy contracts. If empty, any address can execute the contract deployment"),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"backup-flags"},"backup flags"),(0,n.kt)("h4",null,(0,n.kt)("i",null,"grpc-address")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"backup [--grpc-address GRPC_ADDRESS]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"backup --grpc-address 127.0.0.1:9632\n")))),(0,n.kt)("p",null,"Address of the gRPC API. Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"127.0.0.1:9632"),"."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"out")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"backup [--out OUT]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"backup --out backup.dat\n")))),(0,n.kt)("p",null,"Path of archive file to save."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"from")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"from [--from FROM]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"backup --from 0x0\n")))),(0,n.kt)("p",null,"The beginning height of blocks in archive. Default: 0."),(0,n.kt)("hr",null),(0,n.kt)("h4",null,(0,n.kt)("i",null,"to")),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(p.Z,{value:"syntax",label:"Syntax",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"to [--to TO]\n"))),(0,n.kt)(p.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"backup --to 0x2710\n")))),(0,n.kt)("p",null,"The end height of blocks in archive."),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"genesis-template"},"Genesis Template"),(0,n.kt)("p",null,"The genesis file should be used to set the initial state of the blockchain (ex. if some accounts should have a starting balance)."),(0,n.kt)("p",null,"The following ",(0,n.kt)("em",{parentName:"p"},"./genesis.json")," file is generated:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "example",\n    "genesis": {\n        "nonce": "0x0000000000000000",\n        "gasLimit": "0x0000000000001388",\n        "difficulty": "0x0000000000000001",\n        "mixHash": "0x0000000000000000000000000000000000000000000000000000000000000000",\n        "coinbase": "0x0000000000000000000000000000000000000000",\n        "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000"\n    },\n    "params": {\n        "forks": {},\n        "chainID": 100,\n        "engine": {\n            "pow": {}\n        }\n    },\n    "bootnodes": []\n}\n')),(0,n.kt)("h3",{id:"data-directory"},"Data Directory"),(0,n.kt)("p",null,"When executing the ",(0,n.kt)("em",{parentName:"p"},"data-dir")," flag, a ",(0,n.kt)("strong",{parentName:"p"},"test-chain")," folder is generated.\nThe folder structure consists of the following sub-folders:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"blockchain")," - Stores the LevelDB for blockchain objects"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"trie")," - Stores the LevelDB for the Merkle tries"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"keystore")," - Stores private keys for the client. This includes the libp2p private key and the sealing/validator private key"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"consensus")," - Stores any consensus information that the client might need while working")),(0,n.kt)("h2",{id:"resources"},"Resources"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},(0,n.kt)("a",{parentName:"strong",href:"https://developers.google.com/protocol-buffers"},"Protocol Buffers")))))}k.isMDXComponent=!0}}]);